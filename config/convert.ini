[color.color_transfer]
# OPTIONS FOR TRANSFERING THE COLOR DISTRIBUTION FROM THE SOURCE TO THE TARGET IMAGE USING THE MEAN AND STANDARD DEVIATIONS OF THE L*A*B* COLOR SPACE.
# THIS IMPLEMENTATION IS (LOOSELY) BASED ON THE 'COLOR TRANSFER BETWEEN IMAGES' PAPER BY REINHARD ET AL., 2001. MATCHING THE HISTOGRAMS BETWEEN THE SOURCE AND DESTINATION FACES.

# Should components of L*a*b* image be scaled by np.clip before converting back to BGR color space?
# If False then components will be min-max scaled appropriately.
# Clipping will keep target image brightness truer to the input.
# Scaling will adjust image brightness to avoid washed out portions in the resulting color transfer that can be caused by clipping.
# Choose from: True, False
# [Default: True]
clip = True

# Should color transfer strictly follow methodology layed out in original paper?
# The method does not always produce aesthetically pleasing results.
# If False then L*a*b* components will be scaled using the reciprocal of the scaling factor proposed in the paper. This method seems to produce more consistently aesthetically pleasing results.
# Choose from: True, False
# [Default: True]
preserve_paper = True

[color.manual_balance]
# OPTIONS FOR MANUALLY ALTERING THE BALANCE OF COLORS OF THE SWAPPED FACE

# The colorspace to use for adjustment: The three adjustment sliders will effect the image differently depending on which colorspace is selected:
# 	 RGB: Red, Green, Blue. An additive colorspace where colors are obtained by a linear combination of Red, Green, and Blue values. The three channels are correlated by the amount of light hitting the surface. In RGB color space the color information is separated into three channels but the same three channels also encode brightness information.
# 	 HSV: Hue, Saturation, Value. Hue - Dominant wavelength. Saturation - Purity / shades of color. Value - Intensity. Best thing is that it uses only one channel to describe color (H), making it very intuitive to specify color.
# 	 LAB: Lightness, A, B. Lightness - Intensity. A - Color range from green to magenta. B - Color range from blue to yellow. The L channel is independent of color information and encodes brightness only. The other two channels encode color.
# 	 YCrCb: Y - Luminance or Luma component obtained from RGB after gamma correction. Cr - how far is the red component from Luma. Cb - how far is the blue component from Luma. Separates the luminance and chrominance components into different channels.
# Choose from: ['RGB', 'HSV', 'LAB', 'YCrCb']
# [Default: HSV]
colorspace = HSV

# Balance of channel 1:
# 	RGB: Red
# 	HSV: Hue
# 	LAB: Lightness
# 	YCrCb: Luma
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
balance_1 = 0.0

# Balance of channel 2:
# 	RGB: Green
# 	HSV: Saturation
# 	LAB: Green > Magenta
# 	YCrCb: Distance of red from Luma
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
balance_2 = 0.0

# Balance of channel 3:
# 	RGB: Blue
# 	HSV: Intensity
# 	LAB: Blue > Yellow
# 	YCrCb: Distance of blue from Luma
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
balance_3 = 0.0

# Amount of contrast applied.
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
contrast = 0.0

# Amount of brighness applied.
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
brightness = 0.0

[color.match_hist]
# OPTIONS FOR MATCHING THE HISTOGRAMS BETWEEN THE SOURCE AND DESTINATION FACES

# Adjust the threshold for histogram matching. Can reduce extreme colors leaking in by filtering out colors at the extreme ends of the histogram spectrum.
# Select a decimal number between 90.0 and 100.0
# [Default: 99.0]
threshold = 99.0

[mask.box_blend]
# OPTIONS FOR BLENDING THE EDGES OF THE SWAPPED BOX WITH THE BACKGROUND IMAGE

# The type of blending to use:
# 	 gaussian: Blend with Gaussian filter. Slower, but often better than Normalized
# 	 normalized: Blend with Normalized box filter. Faster than Gaussian
# 	 none: Don't perform blending
# Choose from: ['gaussian', 'normalized', 'none']
# [Default: gaussian]
type = gaussian

# The distance from the edges of the swap box to start blending.
# The distance is set as percentage of the swap box size to give the number of pixels from the edge of the box. Eg: For a swap area of 256px and a percentage of 4%, blending would commence 10 pixels from the edge.
# Higher percentages start the blending from closer to the center of the face, so will reveal more of the source face.
# Select a decimal number between 0.1 and 25.0
# [Default: 11.0]
distance = 11.0

# Radius dictates how much blending should occur, or more specifically, how far the blending will spread away from the 'distance' parameter.
# This figure is set as a percentage of the swap box size to give the radius in pixels. Eg: For a swap area of 256px and a percentage of 5%, the radius would be 13 pixels
# NB: Higher percentage means more blending, but too high may reveal more of the source face, or lead to hard lines at the border.
# Select a decimal number between 0.1 and 25.0
# [Default: 5.0]
radius = 5.0

# The number of passes to perform. Additional passes of the blending algorithm can improve smoothing at a time cost. This is more useful for 'box' type blending.
# Additional passes have exponentially less effect so it's not worth setting this too high.
# Select an integer between 1 and 8
# [Default: 1]
passes = 1

[mask.mask_blend]
# OPTIONS FOR BLENDING THE EDGES BETWEEN THE MASK AND THE BACKGROUND IMAGE

# The type of blending to use:
# 	 gaussian: Blend with Gaussian filter. Slower, but often better than Normalized
# 	 normalized: Blend with Normalized box filter. Faster than Gaussian
# 	 none: Don't perform blending
# Choose from: ['gaussian', 'normalized', 'none']
# [Default: normalized]
type = normalized

# Radius dictates how much blending should occur.
# This figure is set as a percentage of the mask diameter to give the radius in pixels. Eg: for a mask with diameter 200px, a percentage of 6% would give a final radius of 3px.
# Higher percentage means more blending.
# Select a decimal number between 0.1 and 25.0
# [Default: 3.0]
radius = 3.0

# The number of passes to perform. Additional passes of the blending algorithm can improve smoothing at a time cost. This is more useful for 'box' type blending.
# Additional passes have exponentially less effect so it's not worth setting this too high.
# Select an integer between 1 and 8
# [Default: 4]
passes = 4

# Erosion kernel size as a percentage of the mask radius area.
# Positive values apply erosion which reduces the size of the swapped area.
# Negative values apply dilation which increases the swapped area.
# Select a decimal number between -100.0 and 100.0
# [Default: 0.0]
erosion = 0.0

[scaling.sharpen]
# OPTIONS FOR SHARPENING THE FACE AFTER PLACEMENT

# The type of sharpening to use:
# 	 box: Fastest, but weakest method. Uses a box filter to assess edges.
# 	 gaussian: Slower, but better than box. Uses a gaussian filter to assess edges.
# 	 unsharp-mask: Slowest, but most tweakable. Uses the unsharp-mask method to assess edges.
# Choose from: ['box', 'gaussian', 'unsharp_mask']
# [Default: unsharp_mask]
method = unsharp_mask

# Percentage that controls the magnitude of each overshoot (how much darker and how much lighter the edge borders become).
# This can also be thought of as how much contrast is added at the edges. It does not affect the width of the edge rims.
# Select an integer between 100 and 500
# [Default: 150]
amount = 150

# Affects the size of the edges to be enhanced or how wide the edge rims become, so a smaller radius enhances smaller-scale detail.
# Radius is set as a percentage of the final frame width and rounded to the nearest pixel. E.g for a 1280 width frame, a 0.6 percenatage will give a radius of 8px.
# Higher radius values can cause halos at the edges, a detectable faint light rim around objects. Fine detail needs a smaller radius. 
# Radius and amount interact; reducing one allows more of the other.
# Select a decimal number between 0.1 and 5.0
# [Default: 0.3]
radius = 0.3

# [unsharp_mask only] Controls the minimal brightness change that will be sharpened or how far apart adjacent tonal values have to be before the filter does anything.
# This lack of action is important to prevent smooth areas from becoming speckled. The threshold setting can be used to sharpen more pronounced edges, while leaving subtler edges untouched. 
# Low values should sharpen more because fewer areas are excluded. 
# Higher threshold values exclude areas of lower contrast.
# Select a decimal number between 1.0 and 10.0
# [Default: 5.0]
threshold = 5.0

[writer.ffmpeg]
# OPTIONS FOR ENCODING CONVERTED FRAMES TO VIDEO.

# Video container to use.
# Choose from: ['avi', 'flv', 'mkv', 'mov', 'mp4', 'mpeg', 'webm']
# [Default: mp4]
container = mp4

# Video codec to use:
# 	 libx264: H.264. A widely supported and commonly used codec.
# 	 libx265: H.265 / HEVC video encoder application library.
# Choose from: ['libx264', 'libx265']
# [Default: libx264]
codec = libx264

# Constant Rate Factor:  0 is lossless and 51 is worst quality possible. A lower value generally leads to higher quality, and a subjectively sane range is 17-28. Consider 17 or 18 to be visually lossless or nearly so; it should look the same or nearly the same as the input but it isn't technically lossless.
# The range is exponential, so increasing the CRF value +6 results in roughly half the bitrate / file size, while -6 leads to roughly twice the bitrate.
# Select an integer between 0 and 51
# [Default: 23]
crf = 23

# A preset is a collection of options that will provide a certain encoding speed to compression ratio.
# A slower preset will provide better compression (compression is quality per filesize).
# Use the slowest preset that you have patience for.
# Choose from: ['ultrafast', 'superfast', 'veryfast', 'faster', 'fast', 'medium', 'slow', 'slower', 'veryslow']
# [Default: medium]
preset = medium

# Change settings based upon the specifics of your input:
# 	 none: Don't perform any additional tuning.
# 	 film: [H.264 only] Use for high quality movie content; lowers deblocking.
# 	 animation: [H.264 only] Good for cartoons; uses higher deblocking and more reference frames.
# 	 grain: Preserves the grain structure in old, grainy film material.
# 	 stillimage: [H.264 only] Good for slideshow-like content.
# 	 fastdecode: Allows faster decoding by disabling certain filters.
# 	 zerolatency: Good for fast encoding and low-latency streaming.
# Choose from: ['none', 'film', 'animation', 'grain', 'stillimage', 'fastdecode', 'zerolatency']
# [Default: none]
tune = none

# [H.264 Only] Limit the output to a specific H.264 profile. Don't change this unless your target device only supports a certain profile.
# Choose from: ['auto', 'baseline', 'main', 'high', 'high10', 'high422', 'high444']
# [Default: auto]
profile = auto

# [H.264 Only] Set the encoder level, Don't change this unless your target device only supports a certain level.
# Choose from: ['auto', '1', '1b', '1.1', '1.2', '1.3', '2', '2.1', '2.2', '3', '3.1', '3.2', '4', '4.1', '4.2', '5', '5.1', '5.2', '6', '6.1', '6.2']
# [Default: auto]
level = auto

[writer.gif]
# OPTIONS FOR OUTPUTTING CONVERTED FRAMES TO AN ANIMATED GIF.

# Frames per Second.
# Select an integer between 1 and 60
# [Default: 25]
fps = 25

# The number of iterations. Set to 0 to loop indefinitely.
# Select an integer between 0 and 100
# [Default: 0]
loop = 0

# The number of colors to quantize the image to. Is rounded to the nearest power of two.
# Choose from: ['2', '4', '8', '16', '32', '64', '128', '256']
# [Default: 256]
palettesize = 256

# If True, will try and optimize the GIF by storing only the rectangular parts of each frame that change with respect to the previous.
# Choose from: True, False
# [Default: False]
subrectangles = False

[writer.opencv]
# OPTIONS FOR OUTPUTTING CONVERTED FRAMES TO A SERIES OF IMAGES USING OPENCV
# OPENCV CAN BE FASTER THAN OTHER IMAGE WRITERS, BUT LACKS SOME CONFIGURATION OPTIONS AND FORMATS.

# Image format to use:
# 	 bmp: Windows bitmap
# 	 jpg: JPEG format
# 	 jp2: JPEG 2000 format
# 	 png: Portable Network Graphics
# 	 ppm: Portable Pixmap Format
# Choose from: ['bmp', 'jpg', 'jp2', 'png', 'ppm']
# [Default: png]
format = png

# Place the swapped face on a transparent layer rather than the original frame.
# NB: This is only compatible with images saved in png format. If an incompatible format is selected then the image will be saved as a png.
# Choose from: True, False
# [Default: False]
draw_transparent = False

# [jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads to larger file sizes.
# Select an integer between 1 and 95
# [Default: 75]
jpg_quality = 75

# [png only] ZLIB compression level, 1 gives best speed, 9 gives best compression, 0 gives no compression at all.
# Select an integer between 0 and 9
# [Default: 3]
png_compress_level = 3

[writer.pillow]
# OPTIONS FOR OUTPUTTING CONVERTED FRAMES TO A SERIES OF IMAGES USING PILLOW
# PILLOW IS MORE FEATURE RICH THAN OPENCV BUT CAN BE SLOWER.

# Image format to use:
# 	 bmp: Windows bitmap
# 	 gif: Graphics Interchange Format (NB: Not animated)
# 	 jpg: JPEG format
# 	 jp2: JPEG 2000 format
# 	 png: Portable Network Graphics
# 	 ppm: Portable Pixmap Format
# 	 tif: Tag Image File Format
# Choose from: ['bmp', 'gif', 'jpg', 'jp2', 'png', 'ppm', 'tif']
# [Default: png]
format = png

# Place the swapped face on a transparent layer rather than the original frame.
# NB: This is only compatible with images saved in png or tif format. If an incompatible format is selected then the image will be saved as a png.
# Choose from: True, False
# [Default: False]
draw_transparent = False

# [gif, jpg and png only] If enabled, indicates that the encoder should make an extra pass over the image in order to select optimal encoder settings.
# Choose from: True, False
# [Default: False]
optimize = False

# [gif only] Set whether to save the gif as interlaced or not.
# Choose from: True, False
# [Default: True]
gif_interlace = True

# [jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads to larger file sizes.
# Select an integer between 1 and 95
# [Default: 75]
jpg_quality = 75

# [png only] ZLIB compression level, 1 gives best speed, 9 gives best compression, 0 gives no compression at all. When optimize option is set to True this has no effect (it is set to 9 regardless of a value passed).
# Select an integer between 0 and 9
# [Default: 3]
png_compress_level = 3

# [tif only] The desired compression method for the file.
# Choose from: ['none', 'tiff_ccitt', 'group3', 'group4', 'tiff_jpeg', 'tiff_adobe_deflate', 'tiff_thunderscan', 'tiff_deflate', 'tiff_sgilog', 'tiff_sgilog24', 'tiff_raw_16']
# [Default: tiff_deflate]
tif_compression = tiff_deflate

